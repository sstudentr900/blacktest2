function HighchartsFn(o) {
    var data = o.data
    var close = data.close || ''
    var flags = data.flags || ''
    var buy = data.buy || ''
    var sell = data.sell || ''
    var series = []
    var yAxis = []
    var option = {
        chart: {
            renderTo: "container",
        },
        colors: ['#4286f5', '#e65596', '#83bf0a', '#834beb', '#fc7742'],
        navigator: {
            margin: 10,
            xAxis: {
                ordinal: false,
                labels: {
                    formatter: function() {
                        var y = (Highcharts.dateFormat('%Y', this.value))
                        var m = (Highcharts.dateFormat('%m', this.value))
                        return y + '/' + m;
                    }
                }
            }
        },
        scrollbar: {
            enabled: false
        },
        rangeSelector: {
            enabled: false,
        },
        tooltip: {
            animation: false,
            hideDelay: 0,
            borderWidth: 0,
            shadow: false,
            useHTML: true,
            headerFormat: '<span class="formatData">{point.key}</span>',
            xDateFormat: '%Y/%m/%d',
            padding: 0,
            positioner: function(width, height, point) {
                var chart = this.chart,
                    position;
                if (point.isHeader) {
                    //date
                    console.log(point.plotY)
                    position = {
                        x: Math.max(
                            // Left side limit
                            chart.plotLeft,
                            Math.min(
                                point.plotX + chart.plotLeft - width / 2,
                                // Right side limit
                                chart.chartWidth - width - chart.marginRight
                            )
                        ),
                        y: point.plotY,
                    };
                } else {
                    //第二欄為距離
                    //kd+20
                    var yValue = 0
                    var str = point.series.name
                        // console.log(str.search('k'), str.search('d'))
                    if (str.search('k') != -1 || str.search('d') != -1) {
                        yValue = 20
                    }
                    if (str.search('量') != -1) {
                        yValue = 25
                    }
                    // console.log(point.series.name, point.series.yAxis.top, chart.plotTop, yValue)
                    //title
                    position = {
                        x: point.series.chart.plotLeft + 5,
                        y: point.series.yAxis.top - chart.plotTop + yValue + 5,
                    };
                }

                return position;
            },
        },
        xAxis: {
            // minTickInterval: 1 * 24 * 3600 * 1000,
            // minRange: 20 * 24 * 3600 * 1000,
            type: 'datetime',
            labels: {
                formatter: function() {
                    var y = (Highcharts.dateFormat('%Y', this.value))
                    var m = (Highcharts.dateFormat('%m', this.value))
                    var e = (Highcharts.dateFormat('%e', this.value))
                    if (e < 10) {
                        e = '0' + e.replace(/\s*/g, "")
                    }
                    return m + '/' + e;
                }
            },
            tickLength: 0,
            gridLineWidth: 1,
            gridLineDashStyle: 'longdash',
            crosshair: {
                dashStyle: 'Dash',
                color: '#adb5bd',
            },
            //範圍
            // ordinal: false,
            range: 6 * 30 * 24 * 3600 * 1000,
            minRange: 20 * 24 * 3600 * 1000,
        },
        credits: {
            enabled: false
        },
        plotOptions: {
            series: {
                lineWidth: 1,
                states: {
                    hover: {
                        enabled: false,
                    },
                    inactive: {
                        opacity: 1
                    }
                },
                dataGrouping: {
                    dateTimeLabelFormats: {
                        millisecond: ['%Y/%m/%d'],
                        second: ['%Y/%m/%d'],
                        minute: ['%Y/%m/%d'],
                        hour: ['%Y/%m/%d'],
                        day: ['%Y/%m/%d'],
                        week: ['%Y/%m/%d'],
                        month: ['%Y/%m/%d'],
                        year: ['%Y/%m/%d']
                    }
                }
            }
        },
    };
    var yAxisFN = function(o) {
        var obj = {
            floor: 0,
            // ceiling: 100,
            className: 'y_line_color',
            showLastLabel: true,
            gridLineWidth: 1,
            gridLineDashStyle: 'longdash',
            crosshair: {
                snap: false,
                dashStyle: 'Dash',
                color: '#adb5bd',
                label: {
                    enabled: true,
                    format: '{value:.2f}',
                    backgroundColor: '#596070'
                }
            },
            labels: {
                align: 'left',
                y: 6,
                x: 6
            },
        }
        if (o.height) {
            obj['height'] = o.height
        }
        if (o.top) {
            obj['top'] = o.top
        }
        if (o.offset) {
            obj['offset'] = o.offset
        }
        if (o.ceiling) {
            obj['ceiling'] = o.ceiling
        }
        yAxis.push(obj)
    }
    var yAxisLength = function(o) {
        var length = yAxis.length
        var container = document.querySelector('#container')
        if (length == 1) {
            yAxis[0]['height'] = '70%'
            yAxisFN({
                'top': "75%",
                'height': "25%",
                'offset': "0",
                // 'ceiling': 100,
            })
        }
        if (length == 2) {
            yAxis[0]['height'] = '60%'
            yAxis[1]['top'] = '65%'
            yAxis[1]['height'] = '15%'
            yAxisFN({
                'height': "15%",
                'top': "85%",
                'offset': "0",
                // 'ceiling': 100,
            })
            container.style.height = 500 + 'px'
        }
        if (length == 3) {
            yAxis[0]['height'] = '55%'
            yAxis[1]['top'] = '60%'
            yAxis[1]['height'] = '10%'
            yAxis[2]['top'] = '75%'
            yAxis[2]['height'] = '10%'
            yAxisFN({
                'top': "90%",
                'height': "10%",
                'offset': "0",
                // 'ceiling': 100,
            })
            container.style.height = 600 + 'px'
        }
        if (length == 4) {
            yAxis[0]['height'] = '40%'
            yAxis[1]['top'] = '45%'
            yAxis[1]['height'] = '10%'
            yAxis[2]['top'] = '60%'
            yAxis[2]['height'] = '10%'
            yAxis[3]['top'] = '75%'
            yAxis[3]['height'] = '10%'
            yAxisFN({
                'top': "90%",
                'height': "10%",
                'offset': "0",
                // 'ceiling': 100,
            })
            container.style.height = 700 + 'px'
        }
        return length
    }
    var buyMethod_ma = function(elemnt) {
        series.push({
            name: elemnt.name + '日均線',
            type: 'spline',
            data: elemnt.data,
            //線顏色
            // color: color,
            // negativeColor: color,
            yAxis: 0,
        })
    }
    var buyMethod_kd = function(elemnt) {
        var length = yAxisLength()
        series.push({
            name: elemnt.name + 'k',
            type: 'spline',
            data: elemnt.data.k,
            color: '#4286f5',
            negativeColor: '#4286f5',
            yAxis: length,
        })
        series.push({
            name: elemnt.name + 'd',
            type: 'spline',
            data: elemnt.data.d,
            color: '#e65596',
            negativeColor: '#e65596',
            yAxis: length,
        })
    }
    var buyMethod_rsi = function(elemnt) {
        var length = yAxisLength()
        series.push({
            name: elemnt.name + 'rsi',
            type: 'spline',
            data: elemnt.data,
            color: '#4286f5',
            negativeColor: '#4286f5',
            yAxis: length,
        })
    }
    var buyMethod_column = function(elemnt) {
        var length = yAxisLength()
        var volume = []
        for (i = 0; i < close.length; i += 1) {
            volume.push({
                x: elemnt.data.column[i][0],
                y: elemnt.data.column[i][1],
                color: close[i][1] > close[i][4] ? 'green' : 'red'
            });
        }
        series.push({
            name: '成交量',
            type: 'column',
            data: volume,
            //高度
            yAxis: length,
        })
        series.push({
            name: elemnt.name + '日量',
            type: 'spline',
            data: elemnt.data.day1,
            color: '#4286f5',
            negativeColor: '#4286f5',
            yAxis: length,
        })
        series.push({
            name: elemnt.name2 + '日量',
            type: 'spline',
            data: elemnt.data.day2,
            color: '#e65596',
            negativeColor: '#e65596',
            yAxis: length,
        })

    }
    var condition = function(elemnt) {
        if (elemnt.method == 'ma') {
            buyMethod_ma(elemnt)
        }
        if (elemnt.method == 'kd') {
            buyMethod_kd(elemnt)
        }
        if (elemnt.method == 'rsi') {
            buyMethod_rsi(elemnt)
        }
        if (elemnt.method == 'column') {
            buyMethod_column(elemnt)
        }
    }

    if (close) {
        series.push({
            type: 'candlestick',
            id: 'close',
            name: '股價',
            data: close,
            color: 'green',
            lineColor: 'green',
            upColor: 'red',
            upLineColor: 'red',
            navigatorOptions: {
                color: '#fff'
            },
            tooltip: {
                pointFormat: '<span style="color:{point.color}">● </span>' +
                    '開:{point.open:.2f} ' +
                    '高:{point.high:.2f} ' +
                    '低:{point.low:.2f} ' +
                    '收:{point.close:.2f}'
            }
        })
        yAxisFN({
            'height': "100%"
        })
    }

    data.buy.forEach(elemnt => condition(elemnt))
    data.sell.forEach(elemnt => condition(elemnt))

    if (flags) {
        series.push({
            type: 'flags',
            name: '買點',
            data: flags.buy,
            onSeries: 'close',
            shape: 'squarepin',
            color: 'red',
            fillColor: 'red',
            style: {
                color: '#fff',
            },
            negativeColor: 'red',
            onKey: 'high',
        })
        series.push({
            type: 'flags',
            name: '賣點',
            data: flags.sell,
            onSeries: 'close',
            shape: 'squarepin',
            color: 'green',
            fillColor: 'green',
            style: {
                color: '#fff',
            },
            negativeColor: 'green',
            onKey: 'high',
        })
    }
    option['series'] = series
    option['yAxis'] = yAxis
    new Highcharts.StockChart(option);
    // document.querySelector('#container').style.height = 600 + 'px'
}

// HighchartsFn3()
function HighchartsFn3() {
    var data = [
        [1534339800000, 209.22, 210.74, 208.33, 210.24, 28807600],
        [1534426200000, 211.75, 213.81, 211.47, 213.32, 28500400],
        [1534512600000, 213.44, 217.95, 213.16, 217.58, 35427000],
        [1534771800000, 218.1, 219.18, 215.11, 215.46, 30287700],
        [1534858200000, 216.8, 217.19, 214.03, 215.04, 26159800],
        [1534944600000, 214.1, 216.36, 213.84, 215.05, 19018100],
        [1535031000000, 214.65, 217.05, 214.6, 215.49, 18883200],
        [1535117400000, 216.6, 216.9, 215.11, 216.16, 18476400],
        [1535376600000, 217.15, 218.74, 216.33, 217.94, 20525100],
        [1535463000000, 219.01, 220.54, 218.92, 219.7, 22776800],
        [1535549400000, 220.15, 223.49, 219.41, 222.98, 27254800],
        [1535635800000, 223.25, 228.26, 222.4, 225.03, 48793800],
        [1535722200000, 226.51, 228.87, 226, 227.63, 43340100],
        [1536067800000, 228.41, 229.18, 226.63, 228.36, 27390100],
        [1536154200000, 228.99, 229.67, 225.1, 226.87, 33333000],
        [1536240600000, 226.23, 227.35, 221.3, 223.1, 34290000],
        [1536327000000, 221.85, 225.37, 220.71, 221.3, 37619800],
        [1536586200000, 220.95, 221.85, 216.47, 218.33, 39516500],
        [1536672600000, 218.01, 224.3, 216.56, 223.85, 35749000],
        [1536759000000, 224.94, 225, 219.84, 221.07, 49278700],
        [1536845400000, 223.52, 228.35, 222.57, 226.41, 41706400],
        [1536931800000, 225.75, 226.84, 222.52, 223.84, 31999300],
        [1537191000000, 222.15, 222.95, 217.27, 217.88, 37195100],
        [1537277400000, 217.79, 221.85, 217.12, 218.24, 31571700],
        [1537363800000, 218.5, 219.62, 215.3, 218.37, 27123800],
        [1537450200000, 220.24, 222.28, 219.15, 220.03, 26608800],
        [1537536600000, 220.78, 221.36, 217.29, 217.66, 96246700],
        [1537795800000, 216.82, 221.26, 216.63, 220.79, 27693400],
        [1537882200000, 219.75, 222.82, 219.7, 222.19, 24554400],
        [1537968600000, 221, 223.75, 219.76, 220.42, 23984700],
        [1538055000000, 223.82, 226.44, 223.54, 224.95, 30181200],
        [1538141400000, 224.79, 225.84, 224.02, 225.74, 22929400],
        [1538400600000, 227.95, 229.42, 226.35, 227.26, 23600800],
        [1538487000000, 227.25, 230, 226.63, 229.28, 24788200],
        [1538573400000, 230.05, 233.47, 229.78, 232.07, 28654800],
        [1538659800000, 230.78, 232.35, 226.73, 227.99, 32042000],
        [1538746200000, 227.96, 228.41, 220.58, 224.29, 33580500],
        [1539005400000, 222.21, 224.8, 220.2, 223.77, 29663900],
        [1539091800000, 223.64, 227.27, 222.25, 226.87, 26891000],
        [1539178200000, 225.46, 226.35, 216.05, 216.36, 41990600],
        [1539264600000, 214.52, 219.5, 212.32, 214.45, 53124400],
        [1539351000000, 220.42, 222.88, 216.84, 222.11, 40337900],
        [1539610200000, 221.16, 221.83, 217.27, 217.36, 30791000],
        [1539696600000, 218.93, 222.99, 216.76, 222.15, 29184000],
        [1539783000000, 222.3, 222.64, 219.34, 221.19, 22885400],
        [1539869400000, 217.86, 219.74, 213, 216.02, 32581300],
        [1539955800000, 218.06, 221.26, 217.43, 219.31, 33078700],
        [1540215000000, 219.79, 223.36, 218.94, 220.65, 28792100],
        [1540301400000, 215.83, 223.25, 214.7, 222.73, 38767800],
        [1540387800000, 222.6, 224.23, 214.54, 215.09, 40925500],
        [1540474200000, 217.71, 221.38, 216.75, 219.8, 29855800],
        [1540560600000, 215.9, 220.19, 212.67, 216.3, 47258400],
        [1540819800000, 219.19, 219.69, 206.09, 212.24, 45935500],
        [1540906200000, 211.15, 215.18, 209.27, 213.3, 36660000],
        [1540992600000, 216.88, 220.45, 216.62, 218.86, 38358900],
        [1541079000000, 219.05, 222.36, 216.81, 222.22, 58323200],
        [1541165400000, 209.55, 213.65, 205.43, 207.48, 91328700],
        [1541428200000, 204.3, 204.39, 198.17, 201.59, 66163700],
        [1541514600000, 201.92, 204.72, 201.69, 203.77, 31882900],
        [1541601000000, 205.97, 210.06, 204.13, 209.95, 33424400],
        [1541687400000, 209.98, 210.12, 206.75, 208.49, 25362600],
        [1541773800000, 205.55, 206.01, 202.25, 204.47, 34365800],
        [1542033000000, 199, 199.85, 193.79, 194.17, 51135500],
        [1542119400000, 191.63, 197.18, 191.45, 192.23, 46882900],
        [1542205800000, 193.9, 194.48, 185.93, 186.8, 60801000],
        [1542292200000, 188.39, 191.97, 186.9, 191.41, 46478800],
        [1542378600000, 190.5, 194.97, 189.46, 193.53, 36928300],
        [1542637800000, 190, 190.7, 184.99, 185.86, 41925300],
        [1542724200000, 178.37, 181.47, 175.51, 176.98, 67825200],
        [1542810600000, 179.73, 180.27, 176.55, 176.78, 31124200],
        [1542983400000, 174.94, 176.6, 172.1, 172.29, 23624000],
        [1543242600000, 174.24, 174.95, 170.26, 174.62, 44998500],
        [1543329000000, 171.51, 174.77, 170.88, 174.24, 41387400],
        [1543415400000, 176.73, 181.29, 174.93, 180.94, 46062500],
        [1543501800000, 182.66, 182.8, 177.7, 179.55, 41770000],
        [1543588200000, 180.29, 180.33, 177.03, 178.58, 39531500],
        [1543847400000, 184.46, 184.94, 181.21, 184.82, 40802500],
        [1543933800000, 180.95, 182.39, 176.27, 176.69, 41344300],
        [1544106600000, 171.76, 174.78, 170.42, 174.72, 43098400],
        [1544193000000, 173.49, 174.49, 168.3, 168.49, 42281600],
        [1544452200000, 165, 170.09, 163.33, 169.6, 62026000],
        [1544538600000, 171.66, 171.79, 167, 168.63, 47281700],
        [1544625000000, 170.4, 171.92, 169.02, 169.1, 35627700],
        [1544711400000, 170.49, 172.57, 169.55, 170.95, 31898600],
        [1544797800000, 169, 169.08, 165.28, 165.48, 40703700],
        [1545057000000, 165.45, 168.35, 162.73, 163.94, 44287900],
        [1545143400000, 165.38, 167.53, 164.39, 166.07, 33841500],
        [1545229800000, 166, 167.45, 159.09, 160.89, 49047300],
        [1545316200000, 160.4, 162.11, 155.3, 156.83, 64773000],
        [1545402600000, 156.86, 158.16, 149.63, 150.73, 95744600],
        [1545661800000, 148.15, 151.55, 146.59, 146.83, 37169200],
        [1545834600000, 148.3, 157.23, 146.72, 157.17, 58582500],
        [1545921000000, 155.84, 156.77, 150.07, 156.15, 53117100],
        [1546007400000, 157.5, 158.52, 154.55, 156.23, 42291400],
        [1546266600000, 158.53, 159.36, 156.48, 157.74, 35003500],
        [1546439400000, 154.89, 158.85, 154.23, 157.92, 37039700],
        [1546525800000, 143.98, 145.72, 142, 142.19, 91312200],
        [1546612200000, 144.53, 148.55, 143.8, 148.26, 58607100],
        [1546871400000, 148.7, 148.83, 145.9, 147.93, 54777800],
        [1546957800000, 149.56, 151.82, 148.52, 150.75, 41025300],
        [1547044200000, 151.29, 154.53, 149.63, 153.31, 45099100],
        [1547130600000, 152.5, 153.97, 150.86, 153.8, 35780700],
        [1547217000000, 152.88, 153.7, 151.51, 152.29, 27023200],
        [1547476200000, 150.85, 151.27, 149.22, 150, 32439200],
        [1547562600000, 150.27, 153.39, 150.05, 153.07, 28710900],
        [1547649000000, 153.08, 155.88, 153, 154.94, 30569700],
        [1547735400000, 154.2, 157.66, 153.26, 155.86, 29821200],
        [1547821800000, 157.5, 157.88, 155.98, 156.82, 33751000],
        [1548167400000, 156.41, 156.73, 152.62, 153.3, 30394000],
        [1548253800000, 154.15, 155.14, 151.7, 153.92, 23130600],
        [1548340200000, 154.11, 154.48, 151.74, 152.7, 25441500],
        [1548426600000, 155.48, 158.13, 154.32, 157.76, 33535500],
        [1548685800000, 155.79, 156.33, 153.66, 156.3, 26192100],
        [1548772200000, 156.25, 158.13, 154.11, 154.68, 41587200],
        [1548858600000, 163.25, 166.15, 160.23, 165.25, 61109800],
        [1548945000000, 166.11, 169, 164.56, 166.44, 40739600],
        [1549031400000, 166.96, 168.98, 165.93, 166.52, 32668100],
        [1549290600000, 167.41, 171.66, 167.28, 171.25, 31495500],
        [1549377000000, 172.86, 175.08, 172.35, 174.18, 36101600],
        [1549463400000, 174.65, 175.57, 172.85, 174.24, 28239600],
        [1549549800000, 172.4, 173.94, 170.34, 170.94, 31741700],
        [1549636200000, 168.99, 170.66, 168.42, 170.41, 23820000],
        [1549895400000, 171.05, 171.21, 169.25, 169.43, 20993400],
        [1549981800000, 170.1, 171, 169.7, 170.89, 22283500],
        [1550068200000, 171.39, 172.48, 169.92, 170.18, 22490200],
        [1550154600000, 169.71, 171.26, 169.38, 170.8, 21835700],
        [1550241000000, 171.25, 171.7, 169.75, 170.42, 24626800],
        [1550586600000, 169.71, 171.44, 169.49, 170.93, 18972800],
        [1550673000000, 171.19, 173.32, 170.99, 172.03, 26114400],
        [1550759400000, 171.8, 172.37, 170.3, 171.06, 17249700],
        [1550845800000, 171.58, 173, 171.38, 172.97, 18913200],
        [1551105000000, 174.16, 175.87, 173.95, 174.23, 21873400],
        [1551191400000, 173.71, 175.3, 173.17, 174.33, 17070200],
        [1551277800000, 173.21, 175, 172.73, 174.87, 27835400],
        [1551364200000, 174.32, 174.91, 172.92, 173.15, 28215400],
        [1551450600000, 174.28, 175.15, 172.89, 174.97, 25886200],
        [1551709800000, 175.69, 177.75, 173.97, 175.85, 27436200],
        [1551796200000, 175.94, 176, 174.54, 175.53, 19737400],
        [1551882600000, 174.67, 175.49, 173.94, 174.52, 20810400],
        [1551969000000, 173.87, 174.44, 172.02, 172.5, 24796400],
        [1552055400000, 170.32, 173.07, 169.5, 172.91, 23999400],
        [1552311000000, 175.49, 179.12, 175.35, 178.9, 32011000],
        [1552397400000, 180, 182.67, 179.37, 180.91, 32467600],
        [1552483800000, 182.25, 183.3, 180.92, 181.71, 31032500],
        [1552570200000, 183.9, 184.1, 182.56, 183.73, 23579500],
        [1552656600000, 184.85, 187.33, 183.74, 186.12, 39042900],
        [1552915800000, 185.8, 188.39, 185.79, 188.02, 26219800],
        [1553002200000, 188.35, 188.99, 185.92, 186.53, 31646400],
        [1553088600000, 186.23, 189.49, 184.73, 188.16, 31035200],
        [1553175000000, 190.02, 196.33, 189.81, 195.09, 51034200],
        [1553261400000, 195.34, 197.69, 190.78, 191.05, 42407700],
        [1553520600000, 191.51, 191.98, 186.6, 188.74, 43845300],
        [1553607000000, 191.66, 192.88, 184.58, 186.79, 49800500],
        [1553693400000, 188.75, 189.76, 186.55, 188.47, 29848400],
        [1553779800000, 188.95, 189.56, 187.53, 188.72, 20780400],
        [1553866200000, 189.83, 190.08, 188.54, 189.95, 23564000],
        [1554125400000, 191.64, 191.68, 188.38, 191.24, 27862000],
        [1554211800000, 191.09, 194.46, 191.05, 194.02, 22765700],
        [1554298200000, 193.25, 196.5, 193.15, 195.35, 23271800],
        [1554384600000, 194.79, 196.37, 193.14, 195.69, 19114300],
        [1554471000000, 196.45, 197.1, 195.93, 197, 18526600],
        [1554730200000, 196.42, 200.23, 196.34, 200.1, 25881700],
        [1554816600000, 200.32, 202.85, 199.23, 199.5, 35768200],
        [1554903000000, 198.68, 200.74, 198.18, 200.62, 21695300],
        [1554989400000, 200.85, 201, 198.44, 198.95, 20900800],
        [1555075800000, 199.2, 200.14, 196.21, 198.87, 27760700],
        [1555335000000, 198.58, 199.85, 198.01, 199.23, 17536600],
        [1555421400000, 199.46, 201.37, 198.56, 199.25, 25696400],
        [1555507800000, 199.54, 203.38, 198.61, 203.13, 28906800],
        [1555594200000, 203.12, 204.15, 202.52, 203.86, 24195800],
        [1555939800000, 202.83, 204.94, 202.34, 204.53, 19439500],
        [1556026200000, 204.43, 207.75, 203.9, 207.48, 23323000],
        [1556112600000, 207.36, 208.48, 207.05, 207.16, 17540600],
        [1556199000000, 206.83, 207.76, 205.12, 205.28, 18543200],
        [1556285400000, 204.9, 205, 202.12, 204.3, 18649100],
        [1556544600000, 204.4, 205.97, 203.86, 204.61, 22204700],
        [1556631000000, 203.06, 203.4, 199.11, 200.67, 46534900],
        [1556717400000, 209.88, 215.31, 209.23, 210.52, 64827300],
        [1556803800000, 209.84, 212.65, 208.13, 209.15, 31996300],
        [1556890200000, 210.89, 211.84, 210.23, 211.75, 20892400],
        [1557149400000, 204.29, 208.84, 203.5, 208.48, 32443100],
        [1557235800000, 205.88, 207.42, 200.83, 202.86, 38763700],
        [1557322200000, 201.9, 205.34, 201.75, 202.9, 26339500],
        [1557408600000, 200.4, 201.68, 196.66, 200.72, 34908600],
        [1557495000000, 197.42, 198.85, 192.77, 197.18, 41208700],
        [1557754200000, 187.71, 189.48, 182.85, 185.72, 57430600],
        [1557840600000, 186.41, 189.7, 185.41, 188.66, 36529700],
        [1557927000000, 186.27, 191.75, 186.02, 190.92, 26544700],
        [1558013400000, 189.91, 192.47, 188.84, 190.08, 33031400],
        [1558099800000, 186.93, 190.9, 186.76, 189, 32879100],
        [1558359000000, 183.52, 184.35, 180.28, 183.09, 38612300],
        [1558445400000, 185.22, 188, 184.7, 186.6, 28364800],
        [1558531800000, 184.66, 185.71, 182.55, 182.78, 29748600],
        [1558618200000, 179.8, 180.54, 177.81, 179.66, 36529700],
        [1558704600000, 180.2, 182.14, 178.62, 178.97, 23714700],
        [1559050200000, 178.92, 180.59, 177.91, 178.23, 27948200],
        [1559136600000, 176.42, 179.35, 176, 177.38, 28481200],
        [1559223000000, 177.95, 179.23, 176.67, 178.3, 21218400],
        [1559309400000, 176.23, 177.99, 174.99, 175.07, 27043600],
        [1559568600000, 175.6, 177.92, 170.27, 173.3, 40396100],
        [1559655000000, 175.44, 179.83, 174.52, 179.64, 30968000],
        [1559741400000, 184.28, 184.99, 181.14, 182.54, 29773400],
        [1559827800000, 183.08, 185.47, 182.15, 185.22, 22526300],
        [1559914200000, 186.51, 191.92, 185.77, 190.15, 30684400],
        [1560173400000, 191.81, 195.37, 191.62, 192.58, 26220900],
        [1560259800000, 194.86, 196, 193.6, 194.81, 26932900],
        [1560346200000, 193.95, 195.97, 193.39, 194.19, 18221800],
        [1560432600000, 194.7, 196.79, 193.6, 194.15, 21674600],
        [1560519000000, 191.55, 193.59, 190.3, 192.74, 18761500],
        [1560778200000, 192.9, 194.96, 192.17, 193.89, 14669100],
        [1560864600000, 196.05, 200.29, 195.21, 198.45, 26551000],
        [1560951000000, 199.68, 199.88, 197.31, 197.87, 21124200],
        [1561037400000, 200.37, 200.61, 198.03, 199.46, 21514000],
        [1561123800000, 198.8, 200.85, 198.15, 198.78, 47800600],
        [1561383000000, 198.54, 200.16, 198.17, 198.58, 18220400],
        [1561469400000, 198.43, 199.26, 195.29, 195.57, 21070300],
        [1561555800000, 197.77, 200.99, 197.35, 199.8, 26067500],
        [1561642200000, 200.29, 201.57, 199.57, 199.74, 20899700],
        [1561728600000, 198.68, 199.5, 197.05, 197.92, 31110600],
        [1561987800000, 203.17, 204.49, 200.65, 201.55, 27316700],
        [1562074200000, 201.41, 203.13, 201.36, 202.73, 16935200],
        [1562160600000, 203.28, 204.44, 202.69, 204.41, 11362000],
        [1562333400000, 203.35, 205.08, 202.9, 204.23, 17265500],
        [1562592600000, 200.81, 201.4, 198.41, 200.02, 25338600],
        [1562679000000, 199.2, 201.51, 198.81, 201.24, 20578000],
        [1562765400000, 201.85, 203.73, 201.56, 203.23, 17897100],
        [1562851800000, 203.31, 204.39, 201.71, 201.75, 20191800],
        [1562938200000, 202.45, 204, 202.2, 203.3, 17595200],
        [1563197400000, 204.09, 205.87, 204, 205.21, 16947400],
        [1563283800000, 204.59, 206.11, 203.5, 204.5, 16866800],
        [1563370200000, 204.05, 205.09, 203.27, 203.35, 14107500],
        [1563456600000, 204, 205.88, 203.7, 205.66, 18582200],
        [1563543000000, 205.79, 206.5, 202.36, 202.59, 20929300],
        [1563802200000, 203.65, 207.23, 203.61, 207.22, 22277900],
        [1563888600000, 208.46, 208.91, 207.29, 208.84, 18355200],
        [1563975000000, 207.67, 209.15, 207.17, 208.67, 14991600],
        [1564061400000, 208.89, 209.24, 206.73, 207.02, 13909600],
        [1564147800000, 207.48, 209.73, 207.14, 207.74, 17618900],
        [1564407000000, 208.46, 210.64, 208.44, 209.68, 21673400],
        [1564493400000, 208.76, 210.16, 207.31, 208.78, 33935700],
        [1564579800000, 216.42, 221.37, 211.3, 213.04, 69281400],
        [1564666200000, 213.9, 218.03, 206.74, 208.43, 54017900],
        [1564752600000, 205.53, 206.43, 201.63, 204.02, 40862100],
        [1565011800000, 197.99, 198.65, 192.58, 193.34, 52393000],
        [1565098200000, 196.31, 198.07, 194.04, 197, 35824800],
        [1565184600000, 195.41, 199.56, 193.82, 199.04, 33364400],
        [1565271000000, 200.2, 203.53, 199.39, 203.43, 27009500],
        [1565357400000, 201.3, 202.76, 199.29, 200.99, 24619700],
        [1565616600000, 199.62, 202.05, 199.15, 200.48, 22474900],
        [1565703000000, 201.02, 212.14, 200.48, 208.97, 47218500],
        [1565789400000, 203.16, 206.44, 202.59, 202.75, 36547400],
        [1565875800000, 203.46, 205.14, 199.67, 201.74, 27227400],
        [1565962200000, 204.28, 207.16, 203.84, 206.5, 27620400],
        [1566221400000, 210.62, 212.73, 210.03, 210.35, 24413600],
        [1566307800000, 210.88, 213.35, 210.32, 210.36, 26884300],
        [1566394200000, 212.99, 213.65, 211.6, 212.64, 21535400],
        [1566480600000, 213.19, 214.44, 210.75, 212.46, 22253700],
        [1566567000000, 209.43, 212.05, 201, 202.64, 46818000],
        [1566826200000, 205.86, 207.19, 205.06, 206.49, 26043600],
        [1566912600000, 207.86, 208.55, 203.53, 204.16, 25873300],
        [1566999000000, 204.1, 205.72, 203.32, 205.53, 15938800],
        [1567085400000, 208.5, 209.32, 206.66, 209.01, 20990500],
        [1567171800000, 210.16, 210.45, 207.2, 208.74, 21143400],
        [1567517400000, 206.43, 206.98, 204.22, 205.7, 20023000],
        [1567603800000, 208.39, 209.48, 207.32, 209.19, 19188100],
        [1567690200000, 212, 213.97, 211.51, 213.28, 23913700],
        [1567776600000, 214.05, 214.42, 212.51, 213.26, 19362300],
        [1568035800000, 214.84, 216.44, 211.07, 214.17, 27309400],
        [1568122200000, 213.86, 216.78, 211.71, 216.7, 31777900],
        [1568208600000, 218.07, 223.71, 217.73, 223.59, 44289600],
        [1568295000000, 224.8, 226.42, 222.86, 223.09, 32226700],
        [1568381400000, 220, 220.79, 217.02, 218.75, 39763300],
        [1568640600000, 217.73, 220.13, 217.56, 219.9, 21158100],
        [1568727000000, 219.96, 220.82, 219.12, 220.7, 18318700],
        [1568813400000, 221.06, 222.85, 219.44, 222.77, 25340000],
        [1568899800000, 222.01, 223.76, 220.37, 220.96, 22060600],
        [1568986200000, 221.38, 222.56, 217.47, 217.73, 55413100],
        [1569245400000, 218.95, 219.84, 217.65, 218.72, 19165500],
        [1569331800000, 221.03, 222.49, 217.19, 217.68, 31190800],
        [1569418200000, 218.55, 221.5, 217.14, 221.03, 21903400],
        [1569504600000, 220, 220.94, 218.83, 219.89, 18833500],
        [1569591000000, 220.54, 220.96, 217.28, 218.82, 25352000],
        [1569850200000, 220.9, 224.58, 220.79, 223.97, 25977400],
        [1569936600000, 225.07, 228.22, 224.2, 224.59, 34805800],
        [1570023000000, 223.06, 223.58, 217.93, 218.96, 34612300],
        [1570109400000, 218.43, 220.96, 215.13, 220.82, 28606500],
        [1570195800000, 225.64, 227.49, 223.89, 227.01, 34619700],
        [1570455000000, 226.27, 229.93, 225.84, 227.06, 30576500],
        [1570541400000, 225.82, 228.06, 224.33, 224.4, 27955000],
        [1570627800000, 227.03, 227.79, 225.64, 227.03, 18692600],
        [1570714200000, 227.93, 230.44, 227.3, 230.09, 28253400],
        [1570800600000, 232.95, 237.64, 232.31, 236.21, 41698900],
        [1571059800000, 234.9, 238.13, 234.67, 235.87, 24106900],
        [1571146200000, 236.39, 237.65, 234.88, 235.32, 21840000],
        [1571232600000, 233.37, 235.24, 233.2, 234.37, 18475800],
        [1571319000000, 235.09, 236.15, 233.52, 235.28, 16896300],
        [1571405400000, 234.59, 237.58, 234.29, 236.41, 24358400],
        [1571664600000, 237.52, 240.99, 237.32, 240.51, 21811800],
        [1571751000000, 241.16, 242.2, 239.62, 239.96, 20573400],
        [1571837400000, 242.1, 243.24, 241.22, 243.18, 18957200],
        [1571923800000, 244.51, 244.8, 241.81, 243.58, 17318800],
        [1572010200000, 243.16, 246.73, 242.88, 246.58, 18369300],
        [1572269400000, 247.42, 249.25, 246.72, 249.05, 24143200],
        [1572355800000, 248.97, 249.75, 242.57, 243.29, 35709900],
        [1572442200000, 244.76, 245.3, 241.21, 243.26, 31130500],
        [1572528600000, 247.24, 249.17, 237.26, 248.76, 34790500],
        [1572615000000, 249.54, 255.93, 249.16, 255.82, 37781300],
        [1572877800000, 257.33, 257.85, 255.38, 257.5, 25818000],
        [1572964200000, 257.05, 258.19, 256.32, 257.13, 19974400],
        [1573050600000, 256.77, 257.49, 255.37, 257.24, 18966100],
        [1573137000000, 258.74, 260.35, 258.11, 259.43, 23735100],
        [1573223400000, 258.69, 260.44, 256.85, 260.14, 17496600],
        [1573482600000, 258.3, 262.47, 258.28, 262.2, 20455300],
        [1573569000000, 261.55, 262.79, 260.92, 261.96, 21847200],
        [1573655400000, 261.13, 264.78, 261.07, 264.47, 25683600],
        [1573741800000, 263.75, 264.88, 262.1, 262.64, 22295700],
        [1573828200000, 263.68, 265.78, 263.01, 265.76, 25051600],
        [1574087400000, 265.8, 267.43, 264.23, 267.1, 21675800],
        [1574173800000, 267.9, 268, 265.39, 266.29, 19041800],
        [1574260200000, 265.54, 266.08, 260.4, 263.19, 26558600],
        [1574346600000, 263.69, 264.01, 261.18, 262.01, 30348800],
        [1574433000000, 262.59, 263.18, 260.84, 261.78, 16331300],
        [1574692200000, 262.71, 266.44, 262.52, 266.37, 21005100],
        [1574778600000, 266.94, 267.16, 262.5, 264.29, 26301900],
        [1574865000000, 265.58, 267.98, 265.31, 267.84, 16308900],
        [1575037800000, 266.6, 268, 265.9, 267.25, 11654400],
        [1575297000000, 267.27, 268.25, 263.45, 264.16, 23621800],
        [1575383400000, 258.31, 259.53, 256.29, 259.45, 28607600],
        [1575469800000, 261.07, 263.31, 260.68, 261.74, 16795400],
        [1575556200000, 263.79, 265.89, 262.73, 265.58, 18606100],
        [1575642600000, 267.48, 271, 267.3, 270.71, 26518900],
        [1575901800000, 270, 270.8, 264.91, 266.92, 32010600],
        [1575988200000, 268.6, 270.07, 265.86, 268.48, 22605100],
        [1576074600000, 268.81, 271.1, 268.5, 270.77, 19689200],
        [1576161000000, 267.78, 272.56, 267.32, 271.46, 34327600],
        [1576247400000, 271.46, 275.3, 270.93, 275.15, 33396900],
        [1576506600000, 277, 280.79, 276.98, 279.86, 32046500],
        [1576593000000, 279.57, 281.77, 278.8, 280.41, 28539600],
        [1576679400000, 279.8, 281.9, 279.12, 279.74, 29007100],
        [1576765800000, 279.5, 281.18, 278.95, 280.02, 24592300],
        [1576852200000, 282.23, 282.65, 278.56, 279.44, 68994500],
        [1577111400000, 280.53, 284.25, 280.37, 284, 24643000],
        [1577197800000, 284.69, 284.89, 282.92, 284.27, 12119700],
        [1577370600000, 284.82, 289.98, 284.7, 289.91, 23280300],
        [1577457000000, 291.12, 293.97, 288.12, 289.8, 36566500],
        [1577716200000, 289.46, 292.69, 285.22, 291.52, 36028600],
        [1577802600000, 289.93, 293.68, 289.52, 293.65, 25201400],
        [1577975400000, 296.24, 300.6, 295.19, 300.35, 33870100],
        [1578061800000, 297.15, 300.58, 296.5, 297.43, 36580700],
        [1578321000000, 293.79, 299.96, 292.75, 299.8, 29596800],
        [1578407400000, 299.84, 300.9, 297.48, 298.39, 27218000],
        [1578493800000, 297.16, 304.44, 297.16, 303.19, 33019800],
        [1578580200000, 307.24, 310.43, 306.2, 309.63, 42527100],
        [1578666600000, 310.6, 312.67, 308.25, 310.33, 35161200],
        [1578925800000, 311.64, 317.07, 311.15, 316.96, 30383000],
        [1579012200000, 316.7, 317.57, 312.17, 312.68, 40488600],
        [1579098600000, 311.85, 315.5, 309.55, 311.34, 30480900],
        [1579185000000, 313.59, 315.7, 312.09, 315.24, 27207300],
        [1579271400000, 316.27, 318.74, 315, 318.73, 34454100],
        [1579617000000, 317.19, 319.02, 316, 316.57, 27710800],
        [1579703400000, 318.58, 319.99, 317.31, 317.7, 25458100],
        [1579789800000, 317.92, 319.56, 315.65, 319.23, 26118000],
        [1579876200000, 320.25, 323.33, 317.52, 318.31, 36634400],
        [1580135400000, 310.06, 311.77, 304.88, 308.95, 40485000],
        [1580221800000, 312.6, 318.4, 312.19, 317.69, 40558500],
        [1580308200000, 324.45, 327.85, 321.38, 324.34, 54057300],
        [1580394600000, 320.54, 324.09, 318.75, 323.87, 31685800],
        [1580481000000, 320.93, 322.68, 308.29, 309.51, 49897100],
        [1580740200000, 304.3, 313.49, 302.22, 308.66, 43496400],
        [1580826600000, 315.31, 319.64, 313.63, 318.85, 34154100],
        [1580913000000, 323.52, 324.76, 318.95, 321.45, 29706700],
        [1580999400000, 322.57, 325.22, 320.26, 325.21, 26356400],
        [1581085800000, 322.37, 323.4, 318, 320.03, 29421000],
        [1581345000000, 314.18, 321.55, 313.85, 321.55, 27337200],
        [1581431400000, 323.6, 323.9, 318.71, 319.61, 23580800],
        [1581517800000, 321.47, 327.22, 321.47, 327.2, 28432600],
        [1581604200000, 324.19, 326.22, 323.35, 324.87, 23625500],
        [1581690600000, 324.74, 325.98, 322.85, 324.95, 20028400],
        [1582036200000, 315.36, 319.75, 314.61, 319, 38132800],
        [1582122600000, 320, 324.57, 320, 323.62, 23496000],
        [1582209000000, 322.63, 324.65, 318.21, 320.3, 25141500],
        [1582295400000, 318.62, 320.45, 310.5, 313.05, 32388500],
        [1582554600000, 297.26, 304.18, 289.23, 298.18, 55548800],
        [1582641000000, 300.95, 302.53, 286.13, 288.08, 57668400],
        [1582727400000, 286.53, 297.88, 286.5, 292.65, 49513700],
        [1582813800000, 281.1, 286, 272.96, 273.52, 79834500],
        [1582900200000, 257.26, 278.41, 256.37, 273.36, 106721200],
        [1583159400000, 282.28, 301.44, 277.72, 298.81, 85349300],
        [1583245800000, 303.67, 304, 285.8, 289.32, 79868900],
        [1583332200000, 296.44, 303.4, 293.13, 302.74, 54794600],
        [1583418600000, 295.52, 299.55, 291.41, 292.92, 46893200],
        [1583505000000, 282, 290.82, 281.23, 289.03, 56544200],
        [1583760600000, 263.75, 278.09, 263, 266.17, 71686200],
        [1583847000000, 277.14, 286.44, 269.37, 285.34, 71322500],
        [1583933400000, 277.39, 281.22, 271.86, 275.43, 63899700],
        [1584019800000, 255.94, 270, 248, 248.23, 104618500],
        [1584106200000, 264.89, 279.92, 252.95, 277.97, 92683000],
        [1584365400000, 241.95, 259.08, 240, 242.21, 80605900],
        [1584451800000, 247.51, 257.61, 238.4, 252.86, 81014000],
        [1584538200000, 239.77, 250, 237.12, 246.67, 75058400],
        [1584624600000, 247.39, 252.84, 242.61, 244.78, 67964300],
        [1584711000000, 247.18, 251.83, 228, 229.24, 100423300],
        [1584970200000, 228.08, 228.5, 212.61, 224.37, 84188200],
        [1585056600000, 236.36, 247.69, 234.3, 246.88, 71882800],
        [1585143000000, 250.75, 258.25, 244.3, 245.52, 75900500],
        [1585229400000, 246.52, 258.68, 246.36, 258.44, 63021800],
        [1585315800000, 252.75, 255.87, 247.05, 247.74, 51054200],
        [1585575000000, 250.74, 255.52, 249.4, 254.81, 41994100],
        [1585661400000, 255.6, 262.49, 252, 254.29, 49250500],
        [1585747800000, 246.5, 248.72, 239.13, 240.91, 44054600],
        [1585834200000, 240.34, 245.15, 236.9, 244.93, 41483500],
        [1585920600000, 242.8, 245.7, 238.97, 241.41, 32470000],
        [1586179800000, 250.9, 263.11, 249.38, 262.47, 50455100],
        [1586266200000, 270.8, 271.7, 259, 259.43, 50721800],
        [1586352600000, 262.74, 267.37, 261.23, 266.07, 42223800],
        [1586439000000, 268.7, 270.07, 264.7, 267.99, 40529100],
        [1586784600000, 268.31, 273.7, 265.83, 273.25, 32755700],
        [1586871000000, 280, 288.25, 278.05, 287.05, 48748700],
        [1586957400000, 282.4, 286.33, 280.63, 284.43, 32788600],
        [1587043800000, 287.38, 288.2, 282.35, 286.69, 39281300],
        [1587130200000, 284.69, 286.95, 276.86, 282.8, 53812500],
        [1587389400000, 277.95, 281.68, 276.85, 276.93, 32503800],
        [1587475800000, 276.28, 277.25, 265.43, 268.37, 45247900],
        [1587562200000, 273.61, 277.9, 272.2, 276.1, 29264300],
        [1587648600000, 275.87, 281.75, 274.87, 275.03, 31203600],
        [1587735000000, 277.2, 283.01, 277, 282.97, 31627200],
        [1587994200000, 281.8, 284.54, 279.95, 283.17, 29271900],
        [1588080600000, 285.08, 285.83, 278.2, 278.58, 28001200],
        [1588167000000, 284.73, 289.67, 283.89, 287.73, 34320200],
        [1588253400000, 289.96, 294.53, 288.35, 293.8, 45457600],
        [1588339800000, 286.25, 299, 285.85, 289.07, 60154200],
        [1588599000000, 289.17, 293.69, 286.32, 293.16, 33392000],
        [1588685400000, 295.06, 301, 294.46, 297.56, 36937800],
        [1588771800000, 300.46, 303.24, 298.87, 300.63, 35583400],
        [1588858200000, 303.22, 305.17, 301.97, 303.74, 28803800],
        [1588944600000, 305.64, 310.35, 304.29, 310.13, 33512000],
        [1589203800000, 308.1, 317.05, 307.24, 315.01, 36486600],
        [1589290200000, 317.83, 319.69, 310.91, 311.41, 40575300],
        [1589376600000, 312.15, 315.95, 303.21, 307.65, 50155600],
        [1589463000000, 304.51, 309.79, 301.53, 309.54, 39732300],
        [1589549400000, 300.35, 307.9, 300.21, 307.71, 41587100],
        [1589808600000, 313.17, 316.5, 310.32, 314.96, 33843100],
        [1589895000000, 315.03, 318.52, 313.01, 313.14, 25432400],
        [1589981400000, 316.68, 319.52, 316.52, 319.23, 27876200],
        [1590067800000, 318.66, 320.89, 315.87, 316.85, 25672200],
        [1590154200000, 315.77, 319.23, 315.35, 318.89, 20450800],
        [1590499800000, 323.5, 324.24, 316.5, 316.73, 31380500],
        [1590586200000, 316.14, 318.71, 313.09, 318.11, 28236300],
        [1590672600000, 316.77, 323.44, 315.63, 318.25, 33390200],
        [1590759000000, 319.25, 321.15, 316.47, 317.94, 38399500],
        [1591018200000, 317.75, 322.35, 317.21, 321.85, 20197800],
        [1591104600000, 320.75, 323.44, 318.93, 323.34, 21910700],
        [1591191000000, 324.66, 326.2, 322.3, 325.12, 26122800],
        [1591277400000, 324.39, 325.62, 320.78, 322.32, 21890100],
        [1591363800000, 323.35, 331.75, 323.23, 331.5, 34312600],
        [1591623000000, 330.25, 333.6, 327.32, 333.46, 23913600],
        [1591709400000, 332.14, 345.61, 332.01, 343.99, 36928100],
        [1591795800000, 347.9, 354.77, 346.09, 352.84, 41662900],
        [1591882200000, 349.31, 351.06, 335.48, 335.9, 50415600],
        [1591968600000, 344.72, 347.8, 334.22, 338.8, 50001500],
        [1592227800000, 333.25, 345.68, 332.58, 342.99, 34702200],
        [1592314200000, 351.46, 353.2, 344.72, 352.08, 41357200],
        [1592400600000, 355.15, 355.4, 351.09, 351.59, 28532000],
        [1592487000000, 351.41, 353.45, 349.22, 351.73, 24205100],
        [1592573400000, 354.64, 356.56, 345.15, 349.72, 66119000],
        [1592832600000, 351.34, 359.46, 351.15, 358.87, 33861300],
        [1592919000000, 364, 372.38, 362.27, 366.53, 53038900],
        [1593005400000, 365, 368.79, 358.52, 360.06, 48155800],
        [1593091800000, 360.7, 365, 357.57, 364.84, 34380600],
        [1593178200000, 364.41, 365.32, 353.02, 353.63, 51314200],
        [1593437400000, 353.25, 362.17, 351.28, 361.78, 32661500],
        [1593523800000, 360.08, 365.98, 360, 364.8, 35055800],
        [1593610200000, 365.12, 367.36, 363.91, 364.11, 27684300],
        [1593696600000, 367.85, 370.47, 363.64, 364.11, 28510400],
        [1594042200000, 370, 375.78, 369.87, 373.85, 29663900],
        [1594128600000, 375.41, 378.62, 372.23, 372.69, 28106100],
        [1594215000000, 376.72, 381.5, 376.36, 381.37, 29273000],
        [1594301400000, 385.05, 385.27, 378.69, 383.01, 31410700],
        [1594387800000, 381.34, 383.92, 378.82, 383.68, 22564300],
        [1594647000000, 389.06, 399.82, 381.03, 381.91, 47912300],
        [1594733400000, 379.36, 389.02, 375.51, 388.23, 42747300],
        [1594819800000, 395.96, 396.99, 385.96, 390.9, 38299500],
        [1594906200000, 386.25, 389.62, 383.62, 386.09, 27644400],
        [1594992600000, 387.95, 388.59, 383.36, 385.31, 23046700],
        [1595251800000, 385.67, 394, 384.25, 393.43, 22579500],
        [1595338200000, 396.69, 397, 386.97, 388, 25911500],
        [1595424600000, 386.77, 391.9, 386.41, 389.09, 22250400],
        [1595511000000, 387.99, 388.31, 368.04, 371.38, 49251100],
        [1595597400000, 363.95, 371.88, 356.58, 370.46, 46359700],
        [1595856600000, 374.84, 379.62, 373.92, 379.24, 30303500],
        [1595943000000, 377.47, 378.2, 372.99, 373.01, 25906400],
        [1596029400000, 375, 380.92, 374.85, 380.16, 22582300],
        [1596115800000, 376.75, 385.19, 375.07, 384.76, 39532500],
        [1596202200000, 411.54, 425.66, 403.3, 425.04, 93584200],
        [1596461400000, 432.8, 446.55, 431.57, 435.75, 77037800],
        [1596547800000, 436.53, 443.16, 433.55, 438.66, 43267900],
        [1596634200000, 437.51, 441.57, 435.59, 440.25, 30498000],
        [1596720600000, 441.62, 457.65, 439.19, 455.61, 50607200],
        [1596807000000, 452.82, 454.7, 441.17, 444.45, 49453300],
        [1597066200000, 450.4, 455.1, 440, 450.91, 53100900],
        [1597152600000, 447.88, 449.93, 436.43, 437.5, 46975600],
        [1597239000000, 441.99, 453.1, 441.19, 452.04, 41486200],
        [1597325400000, 457.72, 464.17, 455.71, 460.04, 52420000],
        [1597435201000, 459.32, 460, 452.18, 459.63, 41391302]
    ]
    var ohlc = [],
        volume = [],
        k = [],
        d = [],
        dataLength = data.length,
        i = 0;
    // var addCircle = function() {
    //     var chart = this.series[0].chart;
    //     console.log(chart.yAxis)
    //     if (!chart.lbl) {
    //         chart.lbl = chart.renderer.label('')
    //             .attr({
    //                 padding: 8,
    //                 zIndex: 997
    //                     // fill: Highcharts.getOptions().colors[1]
    //             })
    //             // .css({
    //             //     color: '#FFFFFF',
    //             // })
    //             .add();
    //     }
    //     chart.lbl
    //         .show()
    //         .attr({
    //             text: '2020-02-14 開:337 高:337 低:334.5 收:233',
    //             x: chart.plotLeft,
    //             y: chart.yAxis[0].top,

    //         });
    // }

    for (i; i < dataLength; i += 1) {
        ohlc.push([
            data[i][0], // the date
            data[i][1], // open
            data[i][2], // high
            data[i][3], // low
            data[i][4] // close
        ]);
        k.push([
            data[i][0], // the date
            data[i][1] // the volume
        ]);
        d.push([
            data[i][0], // the date
            data[i][2] // the volume
        ]);
        // volume.push([
        //     data[i][0], // the date
        //     data[i][5] // the volume
        // ]);
    }
    var option = {
        chart: {
            renderTo: "container",
            // events: {
            //     load: addCircle
            // }
        },
        navigator: {
            // top: 340,
            margin: 10
        },
        colors: ['#4286f5', '#e65596', '#83bf0a', '#834beb', '#fc7742'],
        rangeSelector: {
            enabled: false,
        },
        scrollbar: {
            enabled: false
        },
        tooltip: {
            // split: true,
            // shape: 'square',
            // headerShape: 'callout',
            // animation: false,
            // borderWidth: 0,
            shadow: false,
            useHTML: true,
            headerFormat: '<span class="formatData">{point.key}</span>',
            xDateFormat: '%Y/%m/%d',
            // pointFormat: ' | <span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b>',
            // positioner: function(width, height, point) {
            //     var chart = this.chart,
            //         position;
            //     if (point.isHeader) {
            //         //date
            //         position = {
            //             x: Math.max(
            //                 // Left side limit
            //                 chart.plotLeft,
            //                 Math.min(
            //                     point.plotX + chart.plotLeft - width / 2,
            //                     // Right side limit
            //                     chart.chartWidth - width - chart.marginRight
            //                 )
            //             ),
            //             y: point.plotY,
            //         };
            //     } else {
            //         //title
            //         position = {
            //             x: point.series.chart.plotLeft,
            //             // y: point.series.yAxis.top - chart.plotTop,
            //             // x: 0,
            //             y: point.series.yAxis.top - chart.plotTop
            //         };
            //     }

            //     return position;
            // },
            // formatter: function() {
            //     return ['<b>' + this.x + '</b>'].concat(
            //         this.points ?
            //         this.points.map(function(point) {
            //             return point.series.name + ': ' + point.y + 'm';
            //         }) : []
            //     );
            // },
        },
        // tooltip: {
        //     shared: true,
        //     borderColor: '#adb5bd',
        //     distance: 30
        // },
        // tooltip: {
        //     positioner: function() {
        //         return {
        //             x: this.chart.chartWidth - this.label.width, // right aligned
        //             y: -1 // align to title
        //         };
        //     },
        //     borderWidth: 0,
        //     backgroundColor: 'none',
        //     // pointFormat: '{point.y}',
        //     // headerFormat: '',
        //     shadow: false,
        //     // style: {
        //     //     fontSize: '18px'
        //     // },
        //     // valueDecimals: 10
        // },
        // tooltip: {
        //     // enabled: false,
        //     // crosshairs: true,
        //     positioner: function(width, height, point) {
        //         var chart = this.chart;
        //         return {
        //             x: chart.plotLeft,
        //             y: chart.yAxis.top - chart.plotTop
        //         };
        //     },
        //     borderWidth: 0,
        //     backgroundColor: 'none',
        //     shadow: false,
        //     // split: true
        // },
        // tooltip: {
        //     // shape: 'square',
        //     // headerShape: 'callout',
        //     borderWidth: 0,
        //     shadow: false,
        //     positioner: function(width, height, point) {
        //         var chart = this.chart,
        //             position;
        //         console.log(chart.isHeader)
        //         if (chart.isHeader) {
        //             position = {
        //                 x: Math.max(
        //                     // Left side limit
        //                     0,
        //                     Math.min(
        //                         chart.plotX + chart.plotLeft - width / 2,
        //                         // Right side limit
        //                         chart.chartWidth - width - chart.marginRight
        //                     )
        //                 ),
        //                 y: chart.plotY
        //             };
        //         } else {
        //             position = {
        //                 x: chart.plotLeft,
        //                 y: chart.yAxis.top - chart.plotTop
        //             };
        //         }
        //         return position;
        //     }
        // },
        // tooltip: {
        //     split: true
        // },
        // legend: {
        //     enabled: false
        // },
        yAxis: [{
            className: 'y_line_color',
            showLastLabel: true,
            gridLineDashStyle: 'longdash',
            height: "65%",
            top: "5%",
            crosshair: {
                dashStyle: 'Dash',
                color: '#adb5bd',
                label: {
                    enabled: true,
                    format: '{value:.2f}',
                    backgroundColor: '#596070'

                }
            },
            labels: {
                align: 'left',
                y: 6,
                x: 6
            },
        }, {
            className: 'y_line_color',
            showLastLabel: true,
            gridLineDashStyle: 'longdash',
            height: "25%",
            top: "75%",
            crosshair: {
                snap: false,
                dashStyle: 'Dash',
                color: '#adb5bd',
                label: {
                    enabled: true,
                    format: '{value:.2f}',
                    backgroundColor: '#596070'
                }
            },
            labels: {
                align: 'left',
                y: 6,
                x: 6
            },
            offset: 0,
        }, ],
        xAxis: {
            // startOfWeek: 0,
            // startOnTick: true,
            // endOnTick: true,
            // ordinal: false,
            type: 'datetime',
            labels: {
                // format: '{value:%Y/%m/%e}'
                formatter: function() {
                    var y = (Highcharts.dateFormat('%Y', this.value))
                    var m = (Highcharts.dateFormat('%m', this.value))
                    var e = (Highcharts.dateFormat('%e', this.value))
                    if (e < 10) {
                        e = '0' + e.replace(/\s*/g, "")
                    }
                    return m + '/' + e;
                }
            },
            tickLength: 0,
            gridLineWidth: 1,
            gridLineDashStyle: 'longdash',
            crosshair: {
                dashStyle: 'Dash',
                color: '#adb5bd',
                // label: {
                //     enabled: true,
                //     // format: 'dddddd dddddddd ddd ddddddd',
                //     backgroundColor: '#31353e'
                // }
            },
            //範圍
            range: 6 * 30 * 24 * 3600 * 1000,
            minRange: 20 * 24 * 3600 * 1000,
            // minTickInterval: 1 * 24 * 3600 * 1000,
        },
        credits: {
            enabled: false
        },
        plotOptions: {
            series: {
                lineWidth: 1,
                states: {
                    hover: {
                        enabled: false,
                    },
                    // inactive: {
                    //     opacity: 1
                    // }
                },
                dataGrouping: {
                    // dateTimeLabelFormats: {
                    //     millisecond: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M'],
                    //     second: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M'],
                    //     minute: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M'],
                    //     hour: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M'],
                    //     day: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M'],
                    //     week: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M'],
                    //     month: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M'],
                    //     year: ['%m/%e/%y %H:%M', '%m/%e/%y %H:%M', '-%H:%M']
                    // }
                    dateTimeLabelFormats: {
                        millisecond: ['%Y/%m/%d'],
                        second: ['%Y/%m/%d'],
                        minute: ['%Y/%m/%d'],
                        hour: ['%Y/%m/%d'],
                        day: ['%Y/%m/%d'],
                        week: ['%Y/%m/%d'],
                        month: ['%Y/%m/%d'],
                        year: ['%Y/%m/%d']
                    }
                }
            },
        },
        series: [{
            type: 'candlestick',
            name: "ohlc",
            data: ohlc,
            yAxis: 0,
            color: 'green',
            lineColor: 'green',
            upColor: 'red',
            upLineColor: 'red',
            navigatorOptions: {
                color: Highcharts.getOptions().colors[0]
            },
            tooltip: {
                padding: 0,
                pointFormat: '<span style="color:{point.color}">●</span>' +
                    '<b> {series.name} </b><br>' +
                    '開: {point.open} <br>' +
                    '高: {point.high} <br>' +
                    '低: {point.low} <br>' +
                    '收: {point.close}'
            }
        }, {
            name: 'k值',
            type: 'spline',
            data: k,
            yAxis: 1,
        }, {
            name: 'd值',
            type: 'spline',
            data: d,
            yAxis: 1,
        }]
    };
    var chart = new Highcharts.StockChart(option);
    // console.log(chart)
    // chart.renderer.text('This text is <span style="color: red">styled</span> and <a href="http://example.com">linked</a>', 150, 80)
    //     .css({
    //         color: '#4572A7',
    //         fontSize: '16px'
    //     }).add();
}

function ajax(o) {
    var u = o.u || location.protocol + '//' + location.hostname + location.pathname,
        m = o.m || 'post',
        d = o.d || '', //form id
        a = o.a || ''; //add value=>{name:value}
    return new Promise(function(resolve, reject) {
        var fd = new FormData();
        if (d) {
            fd = new FormData(d);
        }
        if (a) {
            for (var key in a) {
                fd.append(key, a[key]);
            }
        }

        // console.log(typeof(a))
        var json = JSON.stringify(a);
        var xhr = new XMLHttpRequest();
        xhr.open(m, u, true);
        xhr.onload = function() {
            resolve(JSON.parse(xhr.responseText))
        };
        xhr.onerror = function() {
            reject(JSON.parse(xhr.statusText))
        };
        xhr.send(json);
    });
};

function createInput(o) {
    var inputElement = o.input
    var div = document.createElement('div');
    var input = document.createElement(inputElement);
    if (inputElement == 'input') {
        for (var parent in o.inputs) {
            input.setAttribute(parent, o.inputs[parent])
        }
    }
    if (inputElement == 'span') {
        input.innerHTML = o.text
    }

    div.classList.add(o.className);
    div.append(input);
    return div
}

function removeElement(parent, select) {
    var objs = parent.querySelectorAll(select)
    if (objs.length) {
        objs.forEach(error => {
            error.textContent = ''
            error.remove()
        })
    }
}
document.querySelectorAll('.many_select').forEach(obj => {
    obj.addEventListener('change', () => {
        var parent = obj.parentElement
        var parentT = parent.parentElement
        var objValue = obj.value
        var classNameDay = 'many_day'
        removeElement(parentT, '.' + classNameDay)
        if (objValue == 'y') {
            var input = document.createElement('input');
            input.setAttribute('type', 'number')
            input.setAttribute('name', 'many_day')
            input.setAttribute('min', '1')
            input.setAttribute('value', '1')
            var span = document.createElement('span');
            span.innerText = '日';
            var div = document.createElement('div');
            div.classList.add(classNameDay);
            div.append(input, span);
            parent.after(div);
        }
    })
})
document.querySelectorAll('.kd_up_select').forEach(obj => {
    obj.addEventListener('change', () => {
        var parent = obj.parentElement
        var parentT = parent.parentElement
        var objValue = obj.value
        var className = 'kd_v'
        var input = '';
        removeElement(parentT, '.' + className)
        if (objValue == 'up' || objValue == 'low') {
            input = document.createElement('input');
            input.setAttribute('type', 'number')
            input.setAttribute('name', 'v')
            input.setAttribute('min', '1')
            input.setAttribute('value', '20')
            var span = document.createElement('span');
            span.innerText = '且';
            var div = document.createElement('div');
            div.classList.add(className);
            div.append(input, span);
            parent.after(div);
        }

    })
})
document.querySelectorAll('.price_up_Select').forEach(obj => {

    obj.addEventListener('change', () => {
        var price_up = obj.parentElement

        var price_number_name = 'price_number'
        var price_number = createInput({
            'className': price_number_name,
            'input': 'input',
            'inputs': {
                'type': 'number',
                'name': 'number',
                'min': '1',
                'value': 2
            }
        })

        var price_number_span = 'price_number_span'
        var price_number_div = createInput({
            'className': price_number_span,
            'input': 'span',
            'text': '%，',
        })

        var price_day_name = 'price_day'
        var price_day = createInput({
            'className': price_day_name,
            'input': 'input',
            'inputs': {
                'type': 'number',
                'name': 'day',
                'min': '1',
                'value': 5
            }
        })

        var price_day_span = 'price_day_span'
        var price_day_div = createInput({
            'className': price_day_span,
            'input': 'span',
            'text': '日均線，',
        })

        var objValue = obj.value
        var removeFn = function() {
            var next = price_up.nextElementSibling
            var next_span = next.nextElementSibling
            if (next.className == price_number_name || next.className == price_day_name) {
                next.textContent = ''
                next.remove()
            }
            if (next_span.className == price_number_span || next_span.className == price_day_span) {
                next_span.textContent = ''
                next_span.remove()
            }
        }
        removeFn()
        if (objValue == 'up' || objValue == 'low') {
            price_up.after(price_number, price_number_div)
        }
        if (objValue == 'up_m' || objValue == 'low_m') {
            price_up.after(price_day, price_day_div)
        }
    })
})
document.querySelector('.starBacktestButton').addEventListener('click', () => {
    var fromObj = {}
    var selects = document.querySelectorAll('.backtest select,.backtest input')
    selects.forEach(select => {
        fromObj[select.name] = select.value
    })

    var chs = document.querySelectorAll('.sale .ch input')
    var error = false
    var saleTexts = []
    chs.forEach(ch => {
        if (ch.checked == true) {
            var parentCh = ch.parentElement.parentElement
            var saleName = parentCh.parentElement.parentElement.className.split(' ')[1]
            var inputs = parentCh.querySelectorAll('input,select')
            var condition = {}
                // 進場出場
            if (saleTexts.indexOf(saleName) == '-1') {
                fromObj[saleName] = []
                saleTexts.push(saleName)
            }
            inputs.forEach(input => {
                if (input.type == 'checkbox' || input.type == 'select-one' || input.type == 'number' && input.value > 0) {
                    condition[input.name] = input.value
                } else if (input.type != 'checkbox') {
                    var parentInput = input.parentElement
                    var errorObj = document.createElement('div')
                    errorObj.classList.add('error')
                    if (input.value == '') {
                        errorObj.innerHTML = '未填寫'
                    } else {
                        errorObj.innerHTML = '錯誤'
                    }
                    parentInput.append(errorObj)
                    error = true
                }

                input.addEventListener('focus', () => {
                    removeElement(document, '.error')
                })
            })
            fromObj[saleName].push(condition)
        }
    })

    // 進出場沒有設定
    if (!error && saleTexts.length != '2') {
        alert('錯誤!!進出場條件都需要設定')
    }
    if (!error) {
        // console.log(fromObj)
        ajax({
            u: 'backtest',
            a: fromObj
        }).then(function(data) {
            if (data.result == 'true') {
                //img
                HighchartsFn({
                        'data': data.imgPoints
                    })
                    // var imgPoints = data.imgPoints.Close
                    // chart.series[0].addPoint(imgPoints, false, false);
                    // chart.redraw();
                    //table
                var tablePoints = data.table
                var reportForm = document.querySelector('.reportForm')
                var datetop = `<ul>
                  <li>股票代號</li>
                  <li>交易日期</li>
                  <li>累積張數</li>
                  <li>買賣價格</li>
                  <li>庫存成本</li>
                  <li>庫存損益</li>
                  <li>庫存報酬</li>
                  <li>賣出損益</li>
                  <li>賣出報酬</li>
              </ul>`
                reportForm.innerHTML = ''
                reportForm.innerHTML = datetop
                tablePoints.forEach(tablePoint => {
                    var ul = document.createElement('ul')
                    ul.classList.add('bulldate')
                    tablePoint.forEach(element => {
                        var li = document.createElement('li')
                        li.innerHTML = element
                        ul.append(li)
                    })
                    reportForm.append(ul)

                })
            } else {
                alert(data.errorInfo)
            }
        })
    }
})